{"ast":null,"code":"var _HistoricoService;\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HistoricoService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.openweathermap.org/data/2.5';\n    this.apiKey = environment.weatherApi.apiKey;\n    this.historicoCidades = new BehaviorSubject([]);\n    // Carregar histórico do localStorage\n    const historico = localStorage.getItem('historicoCidades');\n    if (historico) {\n      this.historicoCidades.next(JSON.parse(historico));\n    }\n  }\n  adicionarCidade(cidade) {\n    const historico = this.historicoCidades.value;\n    if (!historico.includes(cidade)) {\n      const novoHistorico = [cidade, ...historico].slice(0, 10); // Mantém apenas as últimas 10 cidades\n      this.historicoCidades.next(novoHistorico);\n      localStorage.setItem('historicoCidades', JSON.stringify(novoHistorico));\n    }\n  }\n  getHistorico() {\n    return this.historicoCidades.asObservable();\n  }\n  limparHistorico() {\n    this.historicoCidades.next([]);\n    localStorage.removeItem('historicoCidades');\n  }\n  getClimaHistorico(cidade) {\n    return this.http.get(`${this.apiUrl}/forecast?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br&cnt=40`);\n  }\n}\n_HistoricoService = HistoricoService;\n_HistoricoService.ɵfac = function HistoricoService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _HistoricoService)(i0.ɵɵinject(i1.HttpClient));\n};\n_HistoricoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _HistoricoService,\n  factory: _HistoricoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","BehaviorSubject","HistoricoService","constructor","http","apiUrl","apiKey","weatherApi","historicoCidades","historico","localStorage","getItem","next","JSON","parse","adicionarCidade","cidade","value","includes","novoHistorico","slice","setItem","stringify","getHistorico","asObservable","limparHistorico","removeItem","getClimaHistorico","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/project/sandbox/user-workspace/climaja/src/app/services/historico.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HistoricoService {\n  private apiUrl = 'https://api.openweathermap.org/data/2.5';\n  private apiKey = environment.weatherApi.apiKey;\n  private historicoCidades = new BehaviorSubject<string[]>([]);\n\n  constructor(private http: HttpClient) {\n    // Carregar histórico do localStorage\n    const historico = localStorage.getItem('historicoCidades');\n    if (historico) {\n      this.historicoCidades.next(JSON.parse(historico));\n    }\n  }\n\n  adicionarCidade(cidade: string) {\n    const historico = this.historicoCidades.value;\n    if (!historico.includes(cidade)) {\n      const novoHistorico = [cidade, ...historico].slice(0, 10); // Mantém apenas as últimas 10 cidades\n      this.historicoCidades.next(novoHistorico);\n      localStorage.setItem('historicoCidades', JSON.stringify(novoHistorico));\n    }\n  }\n\n  getHistorico(): Observable<string[]> {\n    return this.historicoCidades.asObservable();\n  }\n\n  limparHistorico() {\n    this.historicoCidades.next([]);\n    localStorage.removeItem('historicoCidades');\n  }\n\n  getClimaHistorico(cidade: string) {\n    return this.http.get(`${this.apiUrl}/forecast?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br&cnt=40`);\n  }\n}\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,eAAe,QAAoB,MAAM;;;AAKlD,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,yCAAyC;IAClD,KAAAC,MAAM,GAAGN,WAAW,CAACO,UAAU,CAACD,MAAM;IACtC,KAAAE,gBAAgB,GAAG,IAAIP,eAAe,CAAW,EAAE,CAAC;IAG1D;IACA,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC1D,IAAIF,SAAS,EAAE;MACb,IAAI,CAACD,gBAAgB,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC;IACnD;EACF;EAEAM,eAAeA,CAACC,MAAc;IAC5B,MAAMP,SAAS,GAAG,IAAI,CAACD,gBAAgB,CAACS,KAAK;IAC7C,IAAI,CAACR,SAAS,CAACS,QAAQ,CAACF,MAAM,CAAC,EAAE;MAC/B,MAAMG,aAAa,GAAG,CAACH,MAAM,EAAE,GAAGP,SAAS,CAAC,CAACW,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACZ,gBAAgB,CAACI,IAAI,CAACO,aAAa,CAAC;MACzCT,YAAY,CAACW,OAAO,CAAC,kBAAkB,EAAER,IAAI,CAACS,SAAS,CAACH,aAAa,CAAC,CAAC;IACzE;EACF;EAEAI,YAAYA,CAAA;IACV,OAAO,IAAI,CAACf,gBAAgB,CAACgB,YAAY,EAAE;EAC7C;EAEAC,eAAeA,CAAA;IACb,IAAI,CAACjB,gBAAgB,CAACI,IAAI,CAAC,EAAE,CAAC;IAC9BF,YAAY,CAACgB,UAAU,CAAC,kBAAkB,CAAC;EAC7C;EAEAC,iBAAiBA,CAACX,MAAc;IAC9B,OAAO,IAAI,CAACZ,IAAI,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACvB,MAAM,eAAeW,MAAM,UAAU,IAAI,CAACV,MAAM,iCAAiC,CAAC;EACjH;;oBAjCWJ,gBAAgB;;mCAAhBA,iBAAgB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAhB9B,iBAAgB;EAAA+B,OAAA,EAAhB/B,iBAAgB,CAAAgC,IAAA;EAAAC,UAAA,EAFf;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}